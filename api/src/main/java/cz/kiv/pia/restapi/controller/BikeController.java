package cz.kiv.pia.restapi.controller;

import cz.kiv.pia.restapi.vo.BikeVO;
import cz.kiv.pia.restapi.vo.UserVO;
import cz.kiv.pia.service.BikeService;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
public class BikeController{
    /**
     * bike Service, used for data retrieving.
     */
    private final BikeService bikeService;

    public BikeController(BikeService bikeService) {this.bikeService = bikeService;}

    /**
     * Method takes Path variable with ID of stand and returns html with all bikes, that are currently available
     * for a ride by this stand.
     * @param model - thymeleaf model for generating html response
     * @param id - ID of Stand for which we want the bikes to be provided
     * @param principal - authentification token provided by 0Auth2.0.
     * @param authentication - authentification token provided by spring in CustomAuthentificationProvider.
     * @return - html template generated by thymeleaf
     */
    @RequestMapping(value = "/bikes/{standId}", method = RequestMethod.GET)
    public String standBikes(Model model, @PathVariable("standId") String id, @AuthenticationPrincipal OidcUser principal,
                             Authentication authentication){
        var bikeVOs = bikeService.getBikesByStandId(Integer.parseInt(id)).stream()
                .map(BikeVO::new)
                .toList();
        // providing user specific data
        if (principal != null) {
            String userId = principal.getClaims().get("sub").toString();
            String name = principal.getClaims().get("name").toString();
            String role = principal.getAttributes().get("https..//localhost.8080/roles").toString();
            role = role.substring(1, role.length() - 1);
            if(role.length() == 0){
                role = "REGULAR";
            }
            model.addAttribute("profile", new UserVO(userId, name,  role));
        }
        if (authentication instanceof UsernamePasswordAuthenticationToken){
            String[] data = authentication.getPrincipal().toString().split(";");
            model.addAttribute("profile", new UserVO(data[0], data[1],  data[2]));
        }
        model.addAttribute("bikes", bikeVOs);
        return "standBikes";
    }
}
