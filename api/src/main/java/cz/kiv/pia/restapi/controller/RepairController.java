package cz.kiv.pia.restapi.controller;

import cz.kiv.pia.restapi.vo.BikeVO;
import cz.kiv.pia.restapi.vo.UserVO;
import cz.kiv.pia.service.BikeService;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

@Controller
public class RepairController {
    /**
     * bike Service, used for data retrieving.
     */
    private final BikeService bikeService;

    public RepairController(BikeService bikeService) {
        this.bikeService = bikeService;
    }

    /**
     * Method that can be accesed only by user with SERVICEMAN role. Lists all bikes that are due for a service.
     * @param model - thymeleaf model for generating html response
     * @param principal - authentification token provided by 0Auth2.0.
     * @param authentication - authentification token provided by spring in CustomAuthentificationProvider.
     * @return - html template generated by thymeleaf
     */
    @GetMapping("/repair")
    public String bikesToRepair(Model model, @AuthenticationPrincipal OidcUser principal,
                                Authentication authentication){
        if (principal != null) {
            String userId = principal.getClaims().get("sub").toString();
            String name = principal.getClaims().get("name").toString();
            String role = principal.getAttributes().get("https..//localhost.8080/roles").toString();
            role = role.substring(1, role.length() - 1);
            if(role.length() == 0){
                role = "REGULAR";
            }
            if(!role.equals("SERVICEMAN")){
                return "redirect:/";
            }
            model.addAttribute("profile", new UserVO(userId, name,  role));
        }
        if (authentication instanceof UsernamePasswordAuthenticationToken){
            String[] data = authentication.getPrincipal().toString().split(";");
            if(!data[2].equals("SERVICEMAN")){
                return "redirect:/";
            }
            model.addAttribute("profile", new UserVO(data[0], data[1],  data[2]));

        }

        List<BikeVO> bikeVOs = new java.util.ArrayList<>(bikeService.getAllBikesToRepair().stream()
                .map(BikeVO::new)
                .toList());
        bikeVOs.sort(new Comparator<BikeVO>() {
            @Override
            public int compare(BikeVO o1, BikeVO o2) {
                return o1.lastServiceStamp().compareTo(o2.lastServiceStamp());
            }
        });
        model.addAttribute("bikes", bikeVOs);
        return "repairBikes";
    }

    /**
     * Post method. Used when SERVICEMAN user repaires a bike. Calls bike Service for updating certains bike LastServiceTimestamp
     * @param model - thymeleaf model for generating html response
     * @param principal - authentification token provided by 0Auth2.0.
     * @param authentication - authentification token provided by spring in CustomAuthentificationProvider.
     * @return - html template generated by thymeleaf
     */
    @PostMapping("/repair/{bikeId}")
    public String repairBikeWithId(Model model, @PathVariable("bikeId") String id, @AuthenticationPrincipal OidcUser principal,
                                   Authentication authentication){
        // providing user specific data
        if (principal != null) {
            String userId = principal.getClaims().get("sub").toString();
            String name = principal.getClaims().get("name").toString();
            String role = principal.getAttributes().get("https..//localhost.8080/roles").toString();
            role = role.substring(1, role.length() - 1);
            if(role.length() == 0){
                role = "REGULAR";
            }
            if(!role.equals("SERVICEMAN")){
                return "redirect:/";
            }
            model.addAttribute("profile", new UserVO(userId, name,  role));
        }
        if (authentication instanceof UsernamePasswordAuthenticationToken){
            String[] data = authentication.getPrincipal().toString().split(";");
            if(!data[2].equals("SERVICEMAN")){
                return "redirect:/";
            }
            model.addAttribute("profile", new UserVO(data[0], data[1],  data[2]));

        }
        if(bikeService.RepairBikeWithId(Integer.parseInt(id)) != 1){
            List<BikeVO> bikeVOs = new java.util.ArrayList<>(bikeService.getAllBikesToRepair().stream()
                    .map(BikeVO::new)
                    .toList());
            model.addAttribute("bikes", bikeVOs);
            model.addAttribute("error", "nelze opravit");
            return "repairBikes";
        }
        List<BikeVO> bikeVOs = new java.util.ArrayList<>(bikeService.getAllBikesToRepair().stream()
                .map(BikeVO::new)
                .toList());
        model.addAttribute("bikes", bikeVOs);
        return "repairBikes";
    }
}
