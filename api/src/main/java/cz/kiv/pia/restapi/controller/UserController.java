package cz.kiv.pia.restapi.controller;

import cz.kiv.pia.restapi.vo.BikeVO;
import cz.kiv.pia.restapi.vo.RideVO;
import cz.kiv.pia.restapi.vo.UserVO;
import cz.kiv.pia.service.RideService;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Controller
public class UserController {

    private final RideService rideService;

    public UserController(RideService rideService) {
        this.rideService = rideService;
    }

    /**
     * Method creates data for user ride history. Only user thats ID is same as id in Path variable can
     * see this history. Different IDs are redirected to main page.
     * @param model - thymeleaf model for generating html response
     * @param id - ID of a user that wants to review his ride history
     * @param principal - authentification token provided by 0Auth2.0.
     * @param authentication - authentification token provided by spring in CustomAuthentificationProvider.
     * @return - html template generated by thymeleaf
     */
    @RequestMapping(value = "/history/{userId}", method = RequestMethod.GET)
    public String getUserRides(Model model, @PathVariable("userId") String id, @AuthenticationPrincipal OidcUser principal,
                               Authentication authentication){
        // providing user specific data
        if (principal != null) {
            String userId = principal.getClaims().get("sub").toString();
            String name = principal.getClaims().get("name").toString();
            String role = principal.getAttributes().get("https..//localhost.8080/roles").toString();
            role = role.substring(1, role.length() - 1);
            if(role.length() == 0){
                role = "REGULAR";
            }
            if(!userId.equals(id)){
                return "redirect:/";
            }
            model.addAttribute("profile", new UserVO(userId, name, role));
        }
        if (authentication instanceof UsernamePasswordAuthenticationToken){
            String[] data = authentication.getPrincipal().toString().split(";");
            if(!data[0].equals(id)){
                return "redirect:/";
            }
            model.addAttribute("profile", new UserVO(data[0], data[1], data[2]));
        }
        List<RideVO> rideVOs = new java.util.ArrayList<>(rideService.getAllUserRides(id).stream()
                .map(RideVO::new)
                .toList());
        model.addAttribute("rides", rideVOs);
        return "history";
    }

}
