package cz.kiv.pia.restapi.controller;

import cz.kiv.pia.restapi.vo.BikeVO;
import cz.kiv.pia.restapi.vo.StandVO;
import cz.kiv.pia.restapi.vo.UserVO;
import cz.kiv.pia.service.BikeService;
import cz.kiv.pia.service.StandService;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {
    /**
     * Service used for retrieving data about stands in system
     */
    private final StandService standService;
    /**
     * Service used for retrieving data about bikes in system
     */
    private final BikeService bikeService;

    public HomeController(StandService standService, BikeService bikeService) {
        this.standService = standService;
        this.bikeService = bikeService;
    }

    /**
     * Method used as main page of the application. User doesnt have to be logged in to see it.
     * Returns map with all stands and rideable bikes.
     * @param model - thymeleaf model for generating html response
     * @param principal - authentification token provided by 0Auth2.0.
     * @param authentication - authentification token provided by spring in CustomAuthentificationProvider.
     * @return - html template generated by thymeleaf
     */
    @GetMapping("/")
    public String home(Model model, @AuthenticationPrincipal OidcUser principal, Authentication authentication) {
        var standVOs = standService.getAll().stream()
                .map(StandVO::new)
                .toList();

        var bikeVOs = bikeService.getAllRideableBikes().stream().map(BikeVO::new).toList();
        // providing user specific data
        if (principal != null) {
            String userId = principal.getClaims().get("sub").toString();
            String name = principal.getClaims().get("name").toString();
            String role = principal.getAttributes().get("https..//localhost.8080/roles").toString();
            role = role.substring(1, role.length() - 1);
            if(role.length() == 0){
                role = "REGULAR";
            }
            model.addAttribute("profile", new UserVO(userId, name, role));
        }
        if (authentication instanceof UsernamePasswordAuthenticationToken){
            String[] data = authentication.getPrincipal().toString().split(";");
            model.addAttribute("profile", new UserVO(data[0], data[1], data[2]));
        }
        model.addAttribute("stands", standVOs);
        model.addAttribute("bikes", bikeVOs);
        return "stands";
    }
}
